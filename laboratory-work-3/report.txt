# ===========================================================
# Problem 1A

## A. Write a class named Ball. Ball should have two private member variables with default values: m_color("black") and m_radius(10.0). Ball should provide constructors to set only m_color, set only m_radius, set both, or set neither value. For this quiz question, do not use default parameters for your constructors. Also write a function to print out the color and radius of the ball.

### Expected Behavior

#### Output

```
color: black, radius: 10
color : blue, radius: 10
color: black, radius: 20
color: blue, radius: 20
```

#### **Solution:**

```c++
#include <iostream>
#include <string>
#include <string_view>

using namespace std;

class Ball
{
  string m_color{"black"};
  double m_radius{10.0};

public:
  Ball(string_view color = "black", double radius = 10.0) : m_color{color}, m_radius{radius} {}

  Ball(double radius) : m_radius{radius} {}

  void print()
  {
    cout << "color: " << m_color << ", radius: " << m_radius << '\n';
  }
};

int main()
{
  return 0;
}
```

# ===========================================================
# Problem 1B

## A. Update your answer to the previous question to use constructors with default parameters. Use as few constructors as possible.

#### **Solution:**

```c++
#include <iostream>
#include <string>
#include <string_view>

using namespace std;

class Ball
{
  string m_color{"black"};
  double m_radius{10.0};

public:
  Ball(string_view color = "black", double radius = 10.0) : m_color{color}, m_radius{radius} {}

  Ball(double radius) : m_radius{radius} {}

  void print()
  {
    cout << "color: " << m_color << ", radius: " << m_radius << '\n';
  }
};

int main()
{
  return 0;
}
```

# A. What happens if you don't declare a default constructor?

A default constructor is a constructor which can be called with no arguments (either defined with an empty parameter list, or with default arguments provided for every parameter).

# ===========================================================
# Problem 2 

## A. Write a class named RGBA that contains 4 member variables of type std::uint8 t named m_red, m_green, m_blue, and m_alpha (#include cstdint to access type std:uint8_t). Assign default values of 0 to m_red, m_green, and m_blue, and 255 to malpha. Create a constructor that uses a member initializer list that allows the user to initialize values for m_red, m_blue, m_green, and m_alpha. Include a print() function that outputs the value of the member variables. If you need a reminder about how to use the fixed width integers, please review lesson 4.6 - Fixed-width integers and size t.

### Expected Behavior

#### Output

```
r=0 g=127 b=127 a=255
```

#### **Solution:**

```c++
#include <iostream>
#include <cstdint>

using namespace std;

class RGBA
{
private:
  uint_fast8_t m_red;
  uint_fast8_t m_green;
  uint_fast8_t m_blue;
  uint_fast8_t m_alpha;

public:
  RGBA(uint_fast8_t red = 0, uint_fast8_t green = 0, uint_fast8_t blue = 0, uint_fast8_t alpha = 255)
      : m_red(red), m_green(green), m_blue(blue), m_alpha(alpha)
  {
  }
  void print()
  {
    cout << "r=" << static_cast<int>(m_red) << " g=" << static_cast<int>(m_green) << " b=" << static_cast<int>(m_blue) << " a=" << static_cast<int>(m_alpha) << "\n";
  }
};

int main()
{
  RGBA teal(0, 127, 127);
  teal.print();

  return 0;
}
```

# ===========================================================
# Problem 3

## A. The program below has a lot of redundancy. Update the following program to use non-static member initialization and member initializer lists.

### Expected Behavior

#### Output

```
color: black, radius: 10
color: blue, radius: 10
color: black, radius: 20
color: blue, radius: 20
```

#### **Solution:**

```c++
#include <iostream>
#include <string>
#include <string_view>

using namespace std;

class Ball
{
  string m_color{"black"};
  double m_radius{10.0};

public:
  Ball(string_view color = "black", double radius = 10.0) : m_color{color}, m_radius{radius} {}

  Ball(double radius) : m_radius{radius} {}

  void print()
  {
    cout << "color: " << m_color << ", radius: " << m_radius << '\n';
  }
};

int main()
{
  Ball def;
  def.print();

  Ball blue{"blue"};
  blue.print();

  Ball twenty{20.0};
  twenty.print();

  Ball blueTwenty{"blue", 20.0};
  blueTwenty.print();

  return 0;
}
```
